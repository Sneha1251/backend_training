"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const validateRequest_1 = __importDefault(require("../middlewares/validateRequest"));
const queryValidation_1 = __importDefault(require("../middlewares/queryValidation"));
const locationValidation_1 = __importDefault(require("../middlewares/locationValidation"));
const jwtAuthentication_1 = __importDefault(require("../middlewares/jwtAuthentication"));
const generateDummyToken_1 = __importDefault(require("../middlewares/generateDummyToken"));
const logger_1 = __importDefault(require("../middlewares/logger"));
const customHeader_1 = __importDefault(require("../middlewares/customHeader"));
const rateLimiter_1 = __importDefault(require("../middlewares/rateLimiter"));
const errorHandler_1 = __importDefault(require("../middlewares/errorHandler"));
const validationError_1 = __importDefault(require("../middlewares/validationError"));
const middlewareChain_1 = require("../middlewares/middlewareChain");
const userController_1 = require("../controllers/userController");
const app = (0, express_1.default)();
app.use(logger_1.default);
app.use((0, customHeader_1.default)("MyCustomValue"));
app.use((0, rateLimiter_1.default)(1));
const obj1 = new userController_1.homePage();
const obj2 = new userController_1.userValidation();
const obj3 = new userController_1.locationValidate();
const obj4 = new userController_1.queryValidate();
const obj5 = new userController_1.generateApiUser();
const obj6 = new userController_1.generateApiPost();
const obj7 = new userController_1.authenticateProtected();
const obj8 = new userController_1.authenticatePublic();
const obj9 = new userController_1.middlewareCheck();
const obj10 = new userController_1.errorCreated();
const obj11 = new userController_1.asyncError();
const obj12 = new userController_1.errorValidation();
const obj13 = new userController_1.HealthCheckController();
app.get("/", obj1.mainPage);
app.post("/validate", validateRequest_1.default, obj2.validateUser);
app.get("/location", locationValidation_1.default, obj3.validateLoco);
app.post("/query/:id", queryValidation_1.default, obj4.validateQuery);
app.get("/api/users", obj5.generateUserApi);
app.post("/api/posts", obj6.generatePostApi);
app.get("/authenticate/protected", generateDummyToken_1.default, jwtAuthentication_1.default, obj7.protectedAuth);
app.get("/authenticate/public", obj8.publicAuth);
app.get("/middleware", middlewareChain_1.middleware1, middlewareChain_1.middleware2, middlewareChain_1.middleware3, obj9.checkMiddleware);
app.get("/error-500", obj10.createError);
app.get("/async-error", obj11.createAsyncError);
app.get("/validation/error/:id", validationError_1.default, obj12.errorValidate);
app.get("/health", obj13.checkHealth);
app.use(errorHandler_1.default);
app.listen(5000, () => {
    console.log("server is running on port 5000");
});
